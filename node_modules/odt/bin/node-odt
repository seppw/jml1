#!/usr/bin/node

/**
 * Module dependencies.
 */

var fs = require('fs')
  , path = require('path')
  , program = require('commander')
  , odt = require('..')
  , template = odt.template
  , createWriteStream = fs.createWriteStream
  , resolve = path.resolve;
require('colors');

// usage

program
  .version(require('../package').version)
  .usage('[options] <template>')
  .option(
    '-o, --output <path>',
    'the path to write the zip file to',
    '/dev/null'
  )
  .option('-v, --values <path>', 'the path to the values json file')
  .option('-t, --table <path>', 'the path to a table json file')
  .option('-c, --print-content', 'print the content after generation');

// parse command line

program.parse(process.argv);
var doc = program.args[0];
var values = program.values || program.table;

// check required options

if (!values) {
  error('no values file given!');
  process.exit(1);
}
if (!program.args[0]) {
  error('no template given!');
  process.exit(1);
}

// the size of the document is available after rendering

var documentSize;

// apply values

var handlers = [];
var values;
if (program.table) {
  values = require(resolve(process.cwd(), program.table));
  handlers.push(template.table(values));
} else {
  values = require(resolve(process.cwd(), program.values));
  handlers.push(template.values(values));
}

if (program.printContent) {

  // print the xml for test capabilities.

  handlers.push(function(xml, done){
    console.log(xml.toString());
    done();
  });
}
var outputStream = createWriteStream(program.output);

// render the document

var templateInstance = template(doc);
handlers.forEach(function(handler){
  templateInstance.apply(handler);
});
templateInstance
  .finalize(function(bytes){
    documentSize = bytes;
  })
  .on('error', function(err){
    throw err;
  })
  .pipe(outputStream)
  .on('close', function(){

    // print rendering stats

    console.log();
    console.log([
      '  ',
      documentSize.toString().bold,
      ' bytes written to '.cyan,
      program.output.bold
    ].join(''));
    console.log();
  });

// prints a nicely formatted error message

function error(message){
  console.error();
  console.error('  ' + message.red);
  console.error();
}
/* vim:set ft=javascript: */
