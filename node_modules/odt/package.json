{
  "name": "odt",
  "version": "1.1.0",
  "description": "A node tool to work with OpenDocument text files.",
  "main": "index.js",
  "bin": {
    "node-odt": "bin/node-odt"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/domachine/node-odt.git"
  },
  "keywords": [
    "node",
    "odt",
    "odf"
  ],
  "author": {
    "name": "Dominik Burgd√∂rfer",
    "email": "dominik.burgdoerfer@mikanda.de"
  },
  "license": "BSD",
  "dependencies": {
    "unzip": "~0.1.7",
    "pipette": "~0.9.3",
    "async": "~0.2.9",
    "adm-zip": "~0.4.3",
    "archiver": "~0.4.3",
    "colors": "~0.6.0-1",
    "merge": "~1.1.1",
    "xmldom": "~0.1.16"
  },
  "devDependencies": {
    "should": "~1.2.2",
    "mocha": "~1.10.0"
  },
  "readmeFilename": "Readme.md",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "readme": "\n# node-odt\n[![Build Status](https://travis-ci.org/domachine/node-odt.png?branch=master)](https://travis-ci.org/domachine/node-odt)\n[![Dependency Status](https://gemnasium.com/domachine/node-odt.png)](https://gemnasium.com/domachine/node-odt)\n\nA node js tool to work with OpenDocument text files.\n\n## Install\n\n```\n  $ npm install odt\n```\n\n## Usage\n\n```js\nvar fs = require('fs')\n  , odt = require('odt')\n  , template = odt.template\n  , createWriteStream = fs.createWriteStream\nvar doc = 'mytemplate.ott';\nvar values = {\n  'subject': { type: 'string', value: 'My subject value' }\n};\n\n// apply values\n\ntemplate(doc)\n  .apply(values)\n  .on('error', function(err){\n    throw err;\n  })\n  .on('end', function(doc){\n\n    // write archive to disk.\n\n    doc.pipe(createWriteStream('mydocument.odt'))\n    doc.finalize(function(err){\n      if (err) throw err;\n      console.log('document written!');\n    });\n  });\n```\n\nThis example can be written much easier using the convenience methods `pipe()`\nand `finalize()`.\n\n```js\nvar fs = require('fs')\n  , odt = require('odt')\n  , template = odt.template\n  , createWriteStream = fs.createWriteStream\nvar doc = 'mytemplate.ott';\nvar values = { 'subject': 'My subject value' };\n\n// apply values\n\ntemplate(doc)\n  .apply(values)\n  .on('error', function(err){\n    throw err;\n  })\n  .finalize(function(bytes){\n    console.log('The document is ' + bytes + ' bytes large.');\n  })\n  .pipe(createWriteStream('mydocument.odt'))\n  .on('close', function(){\n    console.log('document written');\n  });\n```\n\nFor a more advanced example see the command line utility in `bin/node-odt`.\n\n## API\n\n### `Template(arg : String|Stream)`\n\nThe main class to work with templates.  `arg` can be a path to the odt file or\na stream with the odt contents.  `Template` inherits from `EventEmitter` and\nfires the following events:\n\n#### `events`\n\n * `error` - Fired if an error occurs.\n * `end(document)` - Fired when the document is complete.\n\n#### `.apply(values : Object)`\n\nApplies the values to the template.  `values` is an object of the following\nform:\n\n```js\n{\n  \"field-name\": {\n    \"type\": \"field-type\",\n    \"value\": \"field-value\"\n  }\n}\n```\n\ne.g.\n\n```js\n{\n  \"subject\": {\n    \"type\": \"string\",\n    \"value\": \"My subject\"\n  },\n  ...\n}\n```\n\n##### Supported data types\n\n* `string` - This type is well supported and does what you think.\n* `date` - This type can be either an unix timestamp (`Number`) or a javascript\n  `Date`.\n* `cent` - This type should have an integer as value which is converted into a\n  float representing the `Euro` currency.\n\n#### `.apply(handler : Function)`\n\nRegisters a handler to modify the content.  `handler` is a function of the form\n`function(content, done)` while `content` is the parsed xml data of the\n`content.xml` file in the document archive.  `done` is a `function` which needs\nto be called upon completion.\n\n#### `.pipe(stream : Stream)`\n\nPipes the archive to `stream`.\n\n#### `.finalize(done : Function)`\n\nRegister a handler on the 'finalized' event.  This was formerly needed to\nlaunch the finalization of the archive.  But this is done automatically now.\n\n## Bundled handlers\n\n### Table handler\n\nThis handler applies a table template to a table defined by *libreoffice*.\n\n*Warning: This part of the code is yet pretty unstable and might be changed in\nfuture.  Use it carefully.*\n\n#### Usage\n\n```js\nvar odt = require('odt')\n  , table = require('odt/handler').table;\nodt\n  .template('mytemplate.ott')\n  .apply(\n    table({\n      Table1: {\n        'subject': { ... },\n        ...\n      }\n    })\n  )\n  ...\n```\n",
  "_id": "odt@1.1.0",
  "dist": {
    "shasum": "9ad920792782b764cab4d08d519acd88c50ab240"
  },
  "_from": "odt@",
  "_resolved": "https://registry.npmjs.org/odt/-/odt-1.1.0.tgz"
}
